    /**
    * 新增账户表
    * @param model 账户表实体
    * @author luhao
    * @return 账户表主键
    * @since 2019-02-22 10:50:49
    */
    public Integer saveAmount(Amount model) {
        return getDaoFacade().getAmountDao.save$table(model);
    }
    
    /**
    * 根据主键删除账户表
    * @param id 账户表主键
    * @author luhao
    * @since 2019-02-22 10:50:49
    */
    public void deleteAmountById (Integer id) {
        getDaoFacade().getAmountDao.deleteAmountById (id);
    }
    
    /**
    * 修改账户表
    * @param model 账户表实体
    * @author luhao
    * @since 2019-02-22 10:50:49
    */
    public void updateAmount(Amount model) {
        getDaoFacade().getAmountDao.updateAmount(model);
    }
    
    /**
    * 查询账户表列表
    * @param scope 账户表查询条件
    * @author luhao
    * @return 账户表集合
    * @since 2019-02-22 10:50:49
    */
    public List<Amount> getAmountList(Amount scope) {
        return getDaoFacade().getAmountDao.getAmountList(scope);
    }
    
    /**
    * 根据Id查询账户表
    * @param id 账户表主键
    * @author luhao
    * @return 账户表
    * @since 2019-02-22 10:50:49
    */
    public Amount getAmountById(Integer id) {
        return getDaoFacade().getAmountDao.getAmountById(id);
    }
    
    /**
    * 根据主键删除多个账户表
    * @param ids 账户表主键
    * @author luhao
    * @since 2019-02-22 10:50:49
    */
    public void deleteAmountByIds (List<Integer> ids) {
        getDaoFacade().getAmountDao.deleteAmountByIds(ids);
    }
    
    /**
    * 查询账户表记录数
    * @param scope 账户表查询条件
    * @author luhao
    * @return 账户表记录数
    * @since 2019-02-22 10:50:49
    */
    public Integer getAmountPageCount(AmountScope scope) {
        return getDaoFacade().getAmountDao.getAmountPageCount(scope);
    }
    
    /**
    * 查询账户表分页列表
    * @param scope 账户表查询条件
    * @author luhao
    * @return 账户表集合
    * @since 2019-02-22 10:50:49
    */
    public List<Amount> getAmountPageList(AmountScope scope) {
        return getDaoFacade().getAmountDao.getAmountPageList(scope);
    }
    
    /**
    * 新增或修改账户表
    * @param model 账户表实体
    * @author luhao
    * @return 账户表主键
    * @since 2019-02-22 10:50:49
    */
    public Integer saveOrUpdateAmount(Amount model) {
        //保存或修改账户表信息
        Integer id = null;
        if(model.getamountId() == null || affair.getamountId() == 0) {
            id = getDaoFactory().getAffairDao().saveAmount(model);
        }else {
            getDaoFactory().getAffairDao().updateAmount(model);
            id = model.getamountId();
        }
        
        //TODO 保存附件信息
        List<CommonFile> fileList = model.getFileList();
        getLocator().getCommonService().saveCommonFileList(CastUtil.toNotNullString(id), fileList);
        
        return id;
    }
    
     /**
     * 提交账户表到工作流
     * @Description:
     * @param model
     * @return Integer caseId
     * @author luhao
     * @since 2019-02-22 10:50:49
     */
    public Integer submitAmount(Amount model) {
        if(model == null || model.getamountId() == null) {
            throw new RuntimeException("无法创建账户表工作流,账户表对象为空！");
        }
        
        //获得工作流相关信息
        AffairView flowView = getDaoFactory().getAffairDao().getAffairViewFlowById(model.getId());
        if(flowView == null) {
            throw new RuntimeException("该事务已停用,无法提交！");
            //throw new RuntimeException("该事务已停用！！请检查当前事物类型工作流及其配置！事务申请编号：" + model.getId());
        }

        String fwKey = flowView.getFwKey();
        if(StringUtils.isEmpty(fwKey)) {
            throw new RuntimeException("请检查当前单位事务类型编号为【" + model.getAffairCode() + "】的工作流设置！");
        }
        
        // 先改变状态（放在此处是因为工作流在创建后会立即执行后置任务）
        model.setStatus(BizFlowStatusEnum.SUBMIT.getValue());
        updateAffair(model);
        
        Integer caseId =  getLocator().getBizflowService().startBizFlow(fwKey, model.getId().toString(),
                model.getDescription(), new HashMap<String, Object>(16));
        //存入caseId
        model.setBizcaseid(caseId);
        model.setStatus(null);
        updateAffair(model);
        return caseId;    
    }
