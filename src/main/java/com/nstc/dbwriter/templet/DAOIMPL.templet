    /**
    * 新增$table{remark}
    * @param model $table{remark}实体
    * @author $common{author}
    * @return $table{remark}主键
    * @since $table{now}
    */
    public Integer save$table{entityName}($table{entityName} model) {
        return (Integer)getSqlMapClientTemplate().insert(getStatement("save$table{entityName}"),model);
    }
    
    /**
    * 根据主键删除$table{remark}
    * @param id $table{remark}主键
    * @author $common{author}
    * @since $table{now}
    */
    public void delete$table{entityName}ById (Integer id) {
        getSqlMapClientTemplate().delete(getStatement("delete$table{entityName}ById"),id);
    }
    
    /**
    * 修改$table{remark}
    * @param model $table{remark}实体
    * @author $common{author}
    * @since $table{now}
    */
    public void update$table{entityName}($table{entityName} model) {
        getSqlMapClientTemplate().update(getStatement("update$table{entityName}"),model);
    }
    
    /**
    * 查询$table{remark}列表
    * @param scope $table{remark}查询条件
    * @author $common{author}
    * @return $table{remark}集合
    * @since $table{now}
    */
    public List<$table{entityName}View> get$table{entityName}List($table{entityName}Scope scope) {
        List<$table{entityName}View> resultList = getSqlMapClientTemplate().queryForList(getStatement("get$table{entityName}List"),scope);
        return resultList;
    }
    
    /**
    * 根据Id查询$table{remark}
    * @param id $table{remark}主键
    * @author $common{author}
    * @return $table{remark}
    * @since $table{now}
    */
    public $table{entityName}View get$table{entityName}ById(Integer id) {
        return ($table{entityName}View) getSqlMapClientTemplate().queryForObject(getStatement("get$table{entityName}ById"), id);
    }
    
    /**
    * 根据主键删除多个$table{remark}
    * @param ids $table{remark}主键
    * @author $common{author}
    * @since $table{now}
    */
    public void delete$table{entityName}ByIds (List<Integer> ids) {
        getSqlMapClientTemplate().delete(getStatement("delete$table{entityName}ByIds"), ids);
    }
    
    @{delete}
    /**
    * 查询$table{remark}记录数
    * @param scope $table{remark}查询条件
    * @author $common{author}
    * @return $table{remark}记录数
    * @since $table{now}
    */
    public Integer get$table{entityName}PageCount($table{entityName}Scope scope) {
        return (Integer) getSqlMapClientTemplate().queryForObject(getStatement("get$table{entityName}PageCount"), scope);
    }
    
    /**
    * 查询$table{remark}分页列表
    * @param scope $table{remark}查询条件
    * @author $common{author}
    * @return $table{remark}集合
    * @since $table{now}
    */
    public List<$table{entityName}View> get$table{entityName}PageList($table{entityName}Scope scope) {
        Integer count = get$table{entityName}PageCount(scope);
        scope.getPaging().setTotalRow(count);
        List<?> list = getSqlMapClientTemplate().queryForList(getStatement("get$table{entityName}PageList"),scope);
        List<$table{entityName}View> resultList = Arrays.asList(list.toArray(new $table{entityName}[0]));
        return resultList;
    }
    @{/delete}
    
    /**
     * 根据条件删除$table{remark}
     * @param scope $table{remark}删除条件
     * @author $common{author}
     * @since：$table{now}
     */
    public void delete$table{entityName}($table{entityName}Scope scope) {
        getSqlMapClientTemplate().delete(getStatement("delete$table{entityName}"), scope);
    }
    
    /**
    * 新增或者修改$table{remark}集合中的内容
    * @param list $table{remark}集合
    * @author $common{author}
    * @since $table{now}
    */
    public void saveOrUpdate$table{entityName}List (List<$table{entityName}> list){
        getSqlMapClientTemplate().update(getStatement("saveOrUpdate$table{entityName}List"),list);
    }   
    
    /**
    * 新增或者修改$table{remark}
    * @param list $table{remark}实体
    * @author $common{author}
    * @since $table{now}
    */
    public void saveOrUpdate$table{entityName} ($table{entityName} model){
        getSqlMapClientTemplate().update(getStatement("saveOrUpdate$table{entityName}"),model);
    }   
    